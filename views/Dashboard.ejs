<script>
  document.onreadystatechange = async function getinfo() {
    document.getElementById('maincontainer').hidden = true;
    const result = await fetch('/DisplayInfo', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token')
      })
    }).then((res) => res.json())


    if (result.status === 'ok') {
      //all good
      document.getElementsByName('username').forEach(element => {
        element.innerHTML = result.data.username
      });

      document.getElementsByName('bday').forEach(element => {
        element.innerHTML = result.data.bday
      });

      document.getElementsByName('email').forEach(element => {
        element.innerHTML = result.data.email
      });

      document.getElementsByName('phonenumber').forEach(element => {
        element.innerHTML = result.data.phonenumber
      });

    } else {
      localStorage.removeItem('token')
      window.location.href = '/'
    }
  }

  window.onload = async function () {
    document.getElementById('maincontainer').hidden = false;
    displayAllTasks()
    const form = document.getElementById('addtaskform')
    form.addEventListener('submit', addtaskfunc)
  }

  function logout() {
    localStorage.removeItem('token')
    window.location.href = '/'
  }

  // Table Generation -> start

  async function mainCheck() {
    checkboxeslist = await document.getElementsByName("taskcheckbox")
    if (document.getElementById('maincheckbox').checked == true) {
      checkboxeslist.forEach(async element => {
        element.checked = true
      })
    }
    else {
      checkboxeslist.forEach(async element => {
        element.checked = false
      })
    }
  }

  function GenerateTable(result) {
    if (document.getElementById('ttt')) {
      document.getElementById('ttt').outerHTML = "";
    }

    var taskTable = document.createElement("table"), row, cell;
    const tablehead = taskTable.createTHead()

    headrow = tablehead.insertRow()
    const headRowElements = ["<input" + " id=" + "maincheckbox" + " type=\"checkbox\" onclick=\"mainCheck()\">", "Task Name", "Task Status", "Task Option"]

    for (let index = 0; index < headRowElements.length; index++) {

      var headerCell = document.createElement("th")
      headrow.appendChild(headerCell)
      headerCell.innerHTML = headRowElements[index]
    }


    result.data.forEach(function (element) {
      row = taskTable.insertRow()
      row.setAttribute("id", element._id)
      row.insertCell().innerHTML = "<input" + " id=" + element._id + +"\"" + " type=\"checkbox\" name=\"taskcheckbox\">";

      Object.entries(element).forEach(entry => {
        const [key, value] = entry
        if (key == "task") {
          cell = row.insertCell()
          cell.innerHTML = value
        }

        else if (key == "status") {
          cell = row.insertCell()
          if (value == "unfinished") {
            cell.innerHTML = "Not Started"
            row.setAttribute("class", "table-danger")
          }
          else if (value == "inprogress") {
            cell.innerHTML = "In progress"
            row.setAttribute("class", "table-warning")
          }
          else if (value == "done") {
            cell.innerHTML = "Done"
            row.setAttribute("class", "table-success")
          }

        }
      })
      cell = row.insertCell()
      cell.innerHTML = " <button type=\"button\" onClick=\"TaskButton('inprogress', '" + element._id + "')\" class=\"btn btn-outline-primary\"><i class=\"bi bi-play-fill\"></i></button> <button type=\"button\" onClick=\"TaskButton('done', '" + element._id + "')\" class=\"btn btn-outline-success\"><i class=\"bi bi-check-lg\"></i></button> <button type=\"button\" onClick=\"TaskButton('delete', '" + element._id + "')\" class=\"btn btn-outline-danger\"><i class=\"bi bi-trash-fill\"></i></button>"

    })
    taskTable.setAttribute("class", "table");
    taskTable.setAttribute("id", "ttt");
    tablehead.setAttribute("class", "thead-dark")
    document.getElementById("taskstableContainer").appendChild(taskTable);
  }

  // Table Generation -> end


  //Task Display Functionality -> start

  async function searchTask() {

    searchString = document.getElementById('searchbar').value
    console.log(searchString)
    const result = await fetch('/findSearchedTask', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        search: searchString
      })
    }).then((res) => res.json())
    GenerateTable(result)
  }

  async function ActiveTasks() {

    const result = await fetch('/findactivetasks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token')
      })
    }).then((res) => res.json())

    GenerateTable(result)
  }

  async function CompletedTasks() {
    const result = await fetch('/findfinishedtasks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token')
      })
    }).then((res) => res.json())
    GenerateTable(result)
  }

  function AllTasks() {
    displayAllTasks()
  }

  //Task Display Functionality -> end

  //To add tasks -> start

  async function addtaskfunc(event) {
    event.preventDefault()
    const taskNameObj = document.getElementById('taskName')

    const taskName = taskNameObj.value

    const result = await fetch('/addtask', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        taskn: taskName,
        taskd: null
      })
    }).then((res) => res.json())
    taskNameObj.value = null
    $('#AddTaskModal').modal('toggle')
    displayAllTasks()
  }


  //To add tasks -> end

  //Start, End, Delete Tasks -> start

  async function TaskButton(ltaskstatus, ltaskid) {
    const result = await fetch('/updateTask', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        updatestatus: ltaskstatus, //insert status here
        taskid: ltaskid
      })
    }).then((res) => res.json())

    displayAllTasks()
  }

  //Start, End, Delete Tasks -> end

  //To display all tasks -> start

  async function displayAllTasks() {
    const result = await fetch('/findalltasks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token')
      })
    }).then((res) => res.json())
    await GenerateTable(result)
  }

  //To display all tasks -> end

  //Get selected tasks -> start

  function getSelectedTasks() {
    selectedTasksList = document.getElementsByName("taskcheckbox")
    var checkedIDlist = []
    selectedTasksList.forEach(element => {
      if (element.checked) {
        checkedIDlist.push(element.getAttribute('id').slice(0, -3))
      }
    })
    return checkedIDlist
  }

  async function completeSelectedTask() {
    list = getSelectedTasks()
    const result = await fetch('/operateonselected', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        operation: "complete",
        idlist: list
      })
    }).then((res) => res.json())
    await displayAllTasks()
  }

  async function deleteSelectedTask() {
    list = getSelectedTasks()
    const result = await fetch('/operateonselected', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        operation: "delete",
        idlist: list
      })
    }).then((res) => res.json())
    await displayAllTasks()
  }

  async function operateonall_complete() {
    const result = await fetch('/operateonall', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        operation: "complete",
      })
    }).then((res) => res.json())
    displayAllTasks()
  }

  async function operateonall_delete() {
    const result = await fetch('/operateonall', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        operation: "delete",
      })
    }).then((res) => res.json())
    displayAllTasks()
  }

  async function removeCompletedTasks() {
    const result = await fetch('/operateonall', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        token: localStorage.getItem('token'),
        operation: "deleteCompleted",
      })
    }).then((res) => res.json())
    displayAllTasks()
  }

  //Get selected tasks -> end
</script>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

<body>

  <link href="https://cdn.lineicons.com/3.0/lineicons.css" rel="stylesheet">
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
  <div class="container" id="maincontainer">
    <div class="row">
      <div class="col-12 col-lg-3">
        <div class="card">
          <div class="card-body">
            <h5 class="my-3">Welcome <span name="username"></span></h5>
            <br>
            <h6 class="my-3"> Brithday : <span name="bday"></span></h6>
            <h6 class="my-3"> Phone Number : <span name="phonenumber"></span></h6>
            <h6 class="my-3"> Email : <span name="email"></span></h6>
            <div class="fm-menu">
              <div class="list-group list-group-flush">
                <div class="list-group-item py-1"> <i><a class="btn btn-success" onclick="logout()">Logout</a> </i>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>


      <div class="col-12 col-lg-9">
        <div class="card" id="DashName">
          <div class="card-body">
            <h1>Dashboard for <span name="username"></span></h1>
          </div>
        </div>
        <div class="card" id="TasksContainer">
          <div class="card-body">
            <div class="fm-search">
              <div class="mb-0">
                <div class="input-group input-group-lg"> <span class="input-group-text bg-transparent"><a class="btn"
                      onclick="searchTask()"><i class="fa fa-search"></i></a></span>
                  <input id="searchbar" type="text" class="form-control" placeholder="Search Tasks">
                </div>
              </div>
            </div>

            <div class="card-body">
              <div class="row">
                <div class="d-inline-flex p-2 bd-highlight">
                  <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                    <button type="button" class="btn btn-success" onclick="ActiveTasks()">Active Tasks</button>
                    <button type="button" class="btn btn-danger" onclick="CompletedTasks()">Completed Tasks</button>
                    <button type="button" class="btn btn-primary" onclick="AllTasks()">All Tasks</button>
                  </div>
                </div>
                <div class="d-inline-flex p-2 bd-highlight">
                  <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">

                    <button type="button" class="btn btn-success" data-toggle="modal" data-target="#AddTaskModal">Add
                      New Task</button>
                    <div class="modal fade" id="AddTaskModal" tabindex="-1" aria-labelledby="AddTaskModal"
                      aria-hidden="true">
                      <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="AddTaskModalLabel">Add New Task</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                              <span aria-hidden="true">&times;</span>
                            </button>
                          </div>
                          <form id="addtaskform">
                            <div class="modal-body">

                              <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                  <span class="input-group-text" id="basic-addon1">Required</span>
                                </div>
                                <input id="taskName" type="text" class="form-control" placeholder="Task Name"
                                  aria-label="Task Name" aria-describedby="basic-addon1" required />
                              </div>



                            </div>
                            <div class="modal-footer">
                              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                              <button id="addtasksubmit" type="submit" class="btn btn-primary">Create Task</button>
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                    <div class="btn-group btn-group-sm" role="group">
                      <button id="btnGroupDrop1" type="button" class="btn btn-primary dropdown-toggle"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Complete Tasks
                      </button>
                      <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                        <a class="dropdown-item" href="javascript:completeSelectedTask();">Selected Tasks</a>
                        <a class="dropdown-item" href="javascript:operateonall_complete()">All Tasks</a>
                      </div>
                    </div>

                    <div class="btn-group btn-group-sm" role="group">
                      <button id="btnGroupDrop1" type="button" class="btn btn-danger dropdown-toggle"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Remove Tasks
                      </button>
                      <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                        <a class="dropdown-item" href="javascript:removeCompletedTasks()">Completed Tasks</a>
                        <a class="dropdown-item" href="javascript:deleteSelectedTask();">Selected Tasks</a>
                        <a class="dropdown-item" href="javascript:operateonall_delete()">All Tasks</a>
                      </div>
                    </div>

                  </div>
                </div>

              </div>
            </div>

            <div id="taskstableContainer">
            </div>
          </div>
        </div>
      </div>
    </div>
    <style type="text/css">
      body {
        margin-top: 20px;
        background-color: #f7f7ff;
      }

      .card {
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0px solid rgba(0, 0, 0, 0);
        border-radius: .25rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 6px 0 rgb(218 218 253 / 65%), 0 2px 6px 0 rgb(206 206 238 / 54%);
      }

      .fm-file-box {
        font-size: 25px;
        background: #e9ecef;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: .25rem;
      }

      .ms-2 {
        margin-left: .5rem !important;
      }

      .fm-menu .list-group a {
        font-size: 16px;
        color: #5f5f5f;
        display: flex;
        align-items: center;
      }

      .list-group-flush>.list-group-item {
        border-width: 0 0 1px;
      }

      .list-group-item+.list-group-item {
        border-top-width: 0;
      }

      .py-1 {
        padding-top: .25rem !important;
        padding-bottom: .25rem !important;
      }

      .list-group-item {
        position: relative;
        display: block;
        padding: .5rem 1rem;
        text-decoration: none;
        background-color: #fff;
        border: 1px solid rgba(0, 0, 0, .125);
      }

      .radius-15 {
        border-radius: 15px;
      }

      .fm-icon-box {
        font-size: 32px;
        background: #ffffff;
        width: 52px;
        height: 52px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: .25rem;
      }

      .font-24 {
        font-size: 24px;
      }

      .ms-auto {
        margin-left: auto !important;
      }

      .font-30 {
        font-size: 30px;
      }

      .user-groups img {
        margin-left: -14px;
        border: 1px solid #e4e4e4;
        padding: 2px;
        cursor: pointer;
      }

      .rounded-circle {
        border-radius: 50% !important;
      }
    </style>


</body>

</html>